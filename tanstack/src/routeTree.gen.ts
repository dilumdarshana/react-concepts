/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UseSuspenseQueryRouteImport } from './routes/useSuspenseQuery'
import { Route as UseQueryWIthParamsRouteImport } from './routes/useQueryWIthParams'
import { Route as UseQueryRouteImport } from './routes/useQuery'
import { Route as UseQueriesSyncRouteImport } from './routes/useQueriesSync'
import { Route as UseQueriesAsyncRouteImport } from './routes/useQueriesAsync'
import { Route as TanStackTableDynamicRouteImport } from './routes/tanStackTableDynamic'
import { Route as TanStackTableRouteImport } from './routes/tanStackTable'

const UseSuspenseQueryRoute = UseSuspenseQueryRouteImport.update({
  id: '/useSuspenseQuery',
  path: '/useSuspenseQuery',
  getParentRoute: () => rootRouteImport,
} as any)
const UseQueryWIthParamsRoute = UseQueryWIthParamsRouteImport.update({
  id: '/useQueryWIthParams',
  path: '/useQueryWIthParams',
  getParentRoute: () => rootRouteImport,
} as any)
const UseQueryRoute = UseQueryRouteImport.update({
  id: '/useQuery',
  path: '/useQuery',
  getParentRoute: () => rootRouteImport,
} as any)
const UseQueriesSyncRoute = UseQueriesSyncRouteImport.update({
  id: '/useQueriesSync',
  path: '/useQueriesSync',
  getParentRoute: () => rootRouteImport,
} as any)
const UseQueriesAsyncRoute = UseQueriesAsyncRouteImport.update({
  id: '/useQueriesAsync',
  path: '/useQueriesAsync',
  getParentRoute: () => rootRouteImport,
} as any)
const TanStackTableDynamicRoute = TanStackTableDynamicRouteImport.update({
  id: '/tanStackTableDynamic',
  path: '/tanStackTableDynamic',
  getParentRoute: () => rootRouteImport,
} as any)
const TanStackTableRoute = TanStackTableRouteImport.update({
  id: '/tanStackTable',
  path: '/tanStackTable',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/tanStackTable': typeof TanStackTableRoute
  '/tanStackTableDynamic': typeof TanStackTableDynamicRoute
  '/useQueriesAsync': typeof UseQueriesAsyncRoute
  '/useQueriesSync': typeof UseQueriesSyncRoute
  '/useQuery': typeof UseQueryRoute
  '/useQueryWIthParams': typeof UseQueryWIthParamsRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
}
export interface FileRoutesByTo {
  '/tanStackTable': typeof TanStackTableRoute
  '/tanStackTableDynamic': typeof TanStackTableDynamicRoute
  '/useQueriesAsync': typeof UseQueriesAsyncRoute
  '/useQueriesSync': typeof UseQueriesSyncRoute
  '/useQuery': typeof UseQueryRoute
  '/useQueryWIthParams': typeof UseQueryWIthParamsRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/tanStackTable': typeof TanStackTableRoute
  '/tanStackTableDynamic': typeof TanStackTableDynamicRoute
  '/useQueriesAsync': typeof UseQueriesAsyncRoute
  '/useQueriesSync': typeof UseQueriesSyncRoute
  '/useQuery': typeof UseQueryRoute
  '/useQueryWIthParams': typeof UseQueryWIthParamsRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/tanStackTable'
    | '/tanStackTableDynamic'
    | '/useQueriesAsync'
    | '/useQueriesSync'
    | '/useQuery'
    | '/useQueryWIthParams'
    | '/useSuspenseQuery'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/tanStackTable'
    | '/tanStackTableDynamic'
    | '/useQueriesAsync'
    | '/useQueriesSync'
    | '/useQuery'
    | '/useQueryWIthParams'
    | '/useSuspenseQuery'
  id:
    | '__root__'
    | '/tanStackTable'
    | '/tanStackTableDynamic'
    | '/useQueriesAsync'
    | '/useQueriesSync'
    | '/useQuery'
    | '/useQueryWIthParams'
    | '/useSuspenseQuery'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  TanStackTableRoute: typeof TanStackTableRoute
  TanStackTableDynamicRoute: typeof TanStackTableDynamicRoute
  UseQueriesAsyncRoute: typeof UseQueriesAsyncRoute
  UseQueriesSyncRoute: typeof UseQueriesSyncRoute
  UseQueryRoute: typeof UseQueryRoute
  UseQueryWIthParamsRoute: typeof UseQueryWIthParamsRoute
  UseSuspenseQueryRoute: typeof UseSuspenseQueryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/useSuspenseQuery': {
      id: '/useSuspenseQuery'
      path: '/useSuspenseQuery'
      fullPath: '/useSuspenseQuery'
      preLoaderRoute: typeof UseSuspenseQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/useQueryWIthParams': {
      id: '/useQueryWIthParams'
      path: '/useQueryWIthParams'
      fullPath: '/useQueryWIthParams'
      preLoaderRoute: typeof UseQueryWIthParamsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/useQuery': {
      id: '/useQuery'
      path: '/useQuery'
      fullPath: '/useQuery'
      preLoaderRoute: typeof UseQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/useQueriesSync': {
      id: '/useQueriesSync'
      path: '/useQueriesSync'
      fullPath: '/useQueriesSync'
      preLoaderRoute: typeof UseQueriesSyncRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/useQueriesAsync': {
      id: '/useQueriesAsync'
      path: '/useQueriesAsync'
      fullPath: '/useQueriesAsync'
      preLoaderRoute: typeof UseQueriesAsyncRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tanStackTableDynamic': {
      id: '/tanStackTableDynamic'
      path: '/tanStackTableDynamic'
      fullPath: '/tanStackTableDynamic'
      preLoaderRoute: typeof TanStackTableDynamicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tanStackTable': {
      id: '/tanStackTable'
      path: '/tanStackTable'
      fullPath: '/tanStackTable'
      preLoaderRoute: typeof TanStackTableRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  TanStackTableRoute: TanStackTableRoute,
  TanStackTableDynamicRoute: TanStackTableDynamicRoute,
  UseQueriesAsyncRoute: UseQueriesAsyncRoute,
  UseQueriesSyncRoute: UseQueriesSyncRoute,
  UseQueryRoute: UseQueryRoute,
  UseQueryWIthParamsRoute: UseQueryWIthParamsRoute,
  UseSuspenseQueryRoute: UseSuspenseQueryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
